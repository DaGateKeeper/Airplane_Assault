#BlueJ class context
comment0.target=BaseActor
comment0.text=\r\n\ Extends\ functionality\ of\ the\ LibGDX\ Actor\ class.\r\n\ by\ adding\ support\ for\ textures/animation,\ \r\n\ collision\ polygons,\ movement,\ world\ boundaries,\ and\ camera\ scrolling.\ \r\n\ Most\ game\ objects\ should\ extend\ this\ class;\ lists\ of\ extensions\ can\ be\ retrieved\ by\ stage\ and\ class\ name.\r\n\ @see\ \#Actor\r\n\ @author\ Lee\ Stemkoski\r\n
comment1.params=x\ y\ s
comment1.target=BaseActor(float,\ float,\ com.badlogic.gdx.scenes.scene2d.Stage)
comment10.params=stage\ className
comment10.target=java.util.ArrayList\ getList(com.badlogic.gdx.scenes.scene2d.Stage,\ java.lang.String)
comment11.params=dt
comment11.target=void\ act(float)
comment11.text=\r\n\ \ Processes\ all\ Actions\ and\ related\ code\ for\ this\ object;\ \r\n\ \ automatically\ called\ by\ act\ method\ in\ Stage\ class.\r\n\ \ @param\ dt\ elapsed\ time\ (second)\ since\ last\ frame\ (supplied\ by\ Stage\ act\ method)\r\n
comment12.params=batch\ parentAlpha
comment12.target=void\ draw(com.badlogic.gdx.graphics.g2d.Batch,\ float)
comment12.text=\r\n\ \ Draws\ current\ frame\ of\ animation;\ automatically\ called\ by\ draw\ method\ in\ Stage\ class.\ <br>\r\n\ \ If\ color\ has\ been\ set,\ image\ will\ be\ tinted\ by\ that\ color.\ <br>\r\n\ \ If\ no\ animation\ has\ been\ set\ or\ object\ is\ invisible,\ nothing\ will\ be\ drawn.\r\n\ \ @param\ batch\ (supplied\ by\ Stage\ draw\ method)\r\n\ \ @param\ parentAlpha\ (supplied\ by\ Stage\ draw\ method)\r\n\ \ @see\ \#setColor\r\n\ \ @see\ \#setVisible\r\n\ \ \r\n
comment13.params=worldWidth\ worldHeight
comment13.target=void\ boundToWorld(float,\ float)
comment14.params=worldWidth\ worldHeight
comment14.target=void\ wrap(float,\ float)
comment15.params=
comment15.target=com.badlogic.gdx.math.Vector2\ getPosition()
comment16.params=worldWidth\ worldHeight
comment16.target=void\ alignCamera(float,\ float)
comment16.text=\r\n\ \ Center\ camera\ on\ this\ object,\ while\ keeping\ camera's\ range\ of\ view\ \r\n\ \ (determined\ by\ screen\ size)\ completely\ within\ world\ bounds.\r\n
comment17.params=other
comment17.target=void\ centerAt(BaseActor)
comment18.params=
comment18.target=boolean\ isOnStage()
comment19.params=worldWidth\ worldHeight
comment19.target=boolean\ isOnScreen(float,\ float)
comment2.params=phys
comment2.target=void\ setPhysics(Physics)
comment3.params=anim
comment3.target=void\ setAnimator(Animator)
comment3.text=\r\n\ Sets\ the\ animation\ used\ when\ rendering\ this\ actor;\ also\ sets\ actor\ size.\r\n\ @param\ anim\ animation\ that\ will\ be\ drawn\ when\ actor\ is\ rendered\r\n
comment4.params=width\ height
comment4.target=void\ setSize(float,\ float)
comment5.params=
comment5.target=void\ setBoundaryRectangle()
comment5.text=\r\n\ \ Set\ rectangular-shaped\ collision\ polygon.\r\n\ \ This\ method\ is\ automatically\ called\ when\ animation\ is\ set,\r\n\ \ \ provided\ that\ the\ current\ boundary\ polygon\ is\ null.\r\n\ \ @see\ \#setAnimation\r\n
comment6.params=numSides
comment6.target=void\ setBoundaryPolygon(int)
comment6.text=\r\n\ \ Replace\ default\ (rectangle)\ collision\ polygon\ with\ an\ n-sided\ polygon.\ <br>\r\n\ \ Vertices\ of\ polygon\ lie\ on\ the\ ellipse\ contained\ within\ bounding\ rectangle.\r\n\ \ Note\:\ one\ vertex\ will\ be\ located\ at\ point\ (0,width);\r\n\ \ a\ 4-sided\ polygon\ will\ appear\ in\ the\ orientation\ of\ a\ diamond.\r\n\ \ @param\ numSides\ number\ of\ sides\ of\ the\ collision\ polygon\r\n
comment7.params=
comment7.target=com.badlogic.gdx.math.Polygon\ getBoundary()
comment7.text=\r\n\ \ Returns\ bounding\ polygon\ for\ this\ BaseActor,\ adjusted\ by\ Actor's\ current\ position\ and\ rotation.\r\n\ \ @return\ bounding\ polygon\ for\ this\ BaseActor\r\n
comment8.params=other
comment8.target=boolean\ overlaps(BaseActor)
comment8.text=\r\n\ \ Determine\ if\ this\ BaseActor\ overlaps\ other\ BaseActor\ (according\ to\ collision\ polygons).\r\n\ \ @param\ other\ BaseActor\ to\ check\ for\ overlap\r\n\ \ @return\ true\ if\ collision\ polygons\ of\ this\ and\ other\ BaseActor\ overlap\r\n\ \ @see\ \#setCollisionRectangle\r\n\ \ @see\ \#setCollisionPolygon\r\n
comment9.params=other
comment9.target=com.badlogic.gdx.math.Vector2\ preventOverlap(BaseActor)
comment9.text=\r\n\ \ Implement\ a\ "solid"-like\ behavior\:\r\n\ \ when\ there\ is\ overlap,\ move\ this\ BaseActor\ away\ from\ other\ BaseActor\r\n\ \ along\ minimum\ translation\ vector\ until\ there\ is\ no\ overlap.\r\n\ \ @param\ other\ BaseActor\ to\ check\ for\ overlap\r\n\ \ @return\ direction\ vector\ by\ which\ actor\ was\ translated,\ null\ if\ no\ overlap\r\n
numComments=20
